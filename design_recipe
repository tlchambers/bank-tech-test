Bank Statement 
Multi-Class Planned Design Recipe

1. Describe the Problem
Given a client makes a deposit of 1000 on 10-01-2023 and a deposit of 2000 on 13-01-2023 and a withdrawal of 500 on 14-01-2023. When she prints her bank statement Then she would see:
    date   || credit  ||  debit || balance
14/01/2023 ||         || 500.00 || 2500.00
13/01/2023 || 2000.00 ||        || 3000.00
10/01/2023 || 1000.00 ||        || 1000.00

2. Design the Class System

class Transaction {
  Constructor(type, value, date) {
    this.balance = 0
    allTransactions = []
  }

  processRequest() {

  }

  balance() {

  }

  allTransactions() {

  }
}

class Statement {
  Constructor(Transaction) {
    this.transaction = transaction
  }
  generateReport() {

  }
}

const t1 = new Transaction('credit', 500, '2020-02-01')
conat t2 = new Transaction('debit', 1000, '2020-03-01')
const t3 = new Transaction('credit', 2000, '2020-04-01')

const statement = new BankStatement([t1,t2,t3])
statement.generateReport()


3. Create Examples as Integration Tests
Create examples of the classes being used together in different situations and combinations that reflect the ways in which the system will be used.

# EXAMPLE

# Gets a frames from Player class when called
const player1Frame = new Player("John")
player1.firstRoll(1)
player1.secondRoll(0)

const scoreCard = new BowlingScorecard(player1Frame)
scoreCard.add(frame)

scoreCard.all10Frames # => [frame]



4. Create Examples as Unit Tests
Create examples, where appropriate, of the behaviour of each relevant class at a more granular level of detail.

# EXAMPLE

# creates a new player and return player's name
const player1Frame = new Player("John")
expect(player1.name).toEqual("John")

# creates a new player and return first roll score in frameScore
const player1 = new Player("John")
player1.firstRoll(2)

expect(player.frameScore).toEqual([2])

# creates a new player and return first roll and second roll scores in frameScore
const player1 = new Player("John")
player1.firstRoll(2)
player1.secordRoll(5)

expect(player.frameScore).toEqual([2, 5])


# first roll and secord roll score entered cannot be above 10
# if first roll score is 10, push 'X' into frameScore, and print 'end of frame, second roll not valid'


Encode each example as a test. You can add to the above list as you go.

5. Implement the Behaviour
After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour.

